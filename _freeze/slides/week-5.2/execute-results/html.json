{
  "hash": "85481d79f57fbf518c713a545e49253f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Working With Data\ndate: today\ndate-format: long\nfooter: \"[DATS 1001 Website](https://ds4all.rocks)\"\nlogo: images/ds4all-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## How Do We Get Tidy/Clean Data? \n\n<br>\n\n- Get lucky and find it (like on kaggle)\n- Wrangle it ourselves\n- Use a package where it has been wrangled for us\n- Download via an API \n\n## This Lesson\n\n- Practice with World Bank and V-Dem data\n- World Bank data through `wbstats`\n  - There is another package called `WDI`\n  - Both packages for accessing data through WB API\n- Varieties of Democracy (V-Dem) through `vdemlite`\n  - There is also a package called `vdemdata`\n  - `vdemlite` offers more functionality, works better in the cloud\n  \n## `filter()`, `select()`, `mutate()` {.smaller}\n\n<br>\n\nAlong the way we will practice some important `dplyr` verbs:\n\n<br>\n\n- `filter()` is used to select observations based on their values\n- `select()` is used to select variables\n- `mutate()` is used to create new variables or modifying existing ones  \n\n<br>\n\nAs well as some helpful functions from the `janitor` package.  \n\n# Data Frames\n\n## What is a Data Frame?\n\n<br>\n\n- Special kind of tabular data used in data science\n- Each column can be a different data type\n- Data frames are the most common data structure in R\n\n## What is a Tibble? \n\n<br>\n\n- Modern data frames in R\n- Offers better printing and subsetting behaviors \n- Does not convert character vectors to factors by default\n- Displays only the first 10 rows and as many columns as fit on screen\n- Column names are preserved exactly, even if they contain spaces\n\n## Creating a Tibble {.smaller}\n\n<br> \n\n- When you read data into R with `readr` you automatically get a tibble\n- You can create a tibble using `tibble()` from the **tibble** package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  library(tibble)\n  \n  # Create a tibble\n  my_tibble <- tibble(\n    name = c(\"Alice\", \"Bob\", \"Charlie\"),\n    age = c(25, 30, 35),\n    height = c(160, 170, 180),\n    is_student = c(TRUE, FALSE, FALSE)\n  )\n  \nmy_tibble  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 4\n  name      age height is_student\n  <chr>   <dbl>  <dbl> <lgl>     \n1 Alice      25    160 TRUE      \n2 Bob        30    170 FALSE     \n3 Charlie    35    180 FALSE     \n```\n\n\n:::\n:::\n\n\n## Common Data Types {.smaller}\n\n- **\\<chr> (Character)**: Stores text strings\n  - Example: `\"hello\"`, `\"R programming\"`\n  \n- **\\<dbl> (Double)**: Stores decimal (floating-point) numbers\n  - Example: `3.14`, `-1.0`\n  \n- **\\<int> (Integer)**: Stores whole numbers (integers)\n  - Example: `1`, `-100`, `42`\n\n- **\\<lgl> (Logical)**: Stores boolean values (`TRUE`, `FALSE`, `NA`)\n  - Example: `TRUE`, `FALSE`, `NA`\n\n- **\\<fct> (Factor)**: Stores categorical variables with fixed levels\n  - Example: `factor(c(\"low\", \"medium\", \"high\"))`\n\n- **\\<date> (Date)**: Stores dates in the \"YYYY-MM-DD\" format\n  - Example: `as.Date(\"2024-09-05\")`\n\n## Other Data Types {.smaller}\n\n<br>\n\n- **\\<dttm> (Date-Time or POSIXct)**: Stores date-time objects (both date and time).\n  - Example: `as.POSIXct(\"2024-09-05 14:30:00\")`\n\n- **\\<time> (Time)**: Specifically stores time-of-day values (rarely seen without a date)\n  - Example: `\"14:30:00\"`\n  \n- **\\<list> (List)**: Stores lists, where each entry can be a complex object.\n  - Example: `list(c(1, 2, 3), c(\"a\", \"b\", \"c\"))`  \n\n## Dates and Times with `lubridate`\n\n- **`lubridate`** is an R package that makes it easier to work with dates and times\n\n- Use convenient functions to store dates in different formats\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n  \n# Store a date\nmy_date <- ymd(\"2024-09-05\")\nmy_date2 <- mdy(\"09-05-2024\")\nmy_date3 <- dmy(\"05-09-2024\")\n  \n# Print in long form\nformat(my_date, \"%B %d, %Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"September 05, 2024\"\n```\n\n\n:::\n:::\n\n\n## Your Turn\n\n<br>\n\n- Create your own tibble\n- Make it on a topic you find interesting\n- Try to include at least three data types\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# APIs\n\n## APIs\n\n<br>\n\n- API stands for \"Application Programming Interface\"\n- Way for two computers to talk to each other\n- In our case, we will use APIs to download social science data\n\n## APIs in R\n\n::: {.incremental}\n- APIs are accessed through packages in R\n- Sometimes there can be more than one package for an API\n- Much easier than reading in data from messy flat file!\n- We will use a few API packages in this course\n  - World Bank data through `wbstats` (or `WDI`)\n  - `fredr` for Federal Reserve Economic Data\n  - `tidycensus` for US Census data\n- But there are many APIs out there (please explore!)\n:::\n\n\n## Searching for WB Indicators\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflfp_indicators <- wb_search(\"female labor force\") # store the list of indicators\n\nprint(flfp_indicators, n=26) # view the indicators\n```\n:::\n\n\n## `wbstats` Example\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-4|6-7|9|10|11|12|13-16|18-19\"}\n# Load packages\nlibrary(wbstats) # for downloading WB data\nlibrary(dplyr) # for selecting, renaming and mutating\nlibrary(janitor) # for rounding\n\n# Store the list of indicators in an object\nindicators <- c(\"flfp\" = \"SL.TLF.CACT.FE.ZS\", \"women_rep\" = \"SG.GEN.PARL.ZS\") \n\n# Download the data  \nwomen_emp <- wb_data(indicators, mrv = 50) |> # download data for last 50 yrs\n  select(!iso2c) |> # drop the iso2c code which we won't be using\n  rename(year = date) |> # rename date to year \n  mutate(\n    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th\n    women_rep = round_to_fraction(women_rep, denominator = 100) \n  )\n\n# View the data\nglimpse(women_emp) \n```\n:::\n\n\n## Your Turn!\n\n<br>\n\n- Search for a WB indicator\n- Download the data\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"top:10%;right:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# V-Dem Data\n\n## The V-Dem Dataset\n\n<br>\n\n- V-Dem stands for Varieties of Democracy\n- It is a dataset that measures democracy around the world\n- Based on expert assessments of the quality of democracy in each country\n- Two packages we will explore: `vdemlite` and `vdemdata`\n\n## `vdemlite` \n\n<br>\n\n- Covers a few hundred commonly used indicators and indices from 1970 onward\n- Covers everything in [this document](https://v-dem.net/documents/41/v-dem_structureofaggregation_v14.pdf)\n- As opposed to 4000+ indicators from the 18th century onward\n- Adds some functionality for working with the data\n- Easier to work with in the cloud and apps\n\n## `vdemlite` fuctions\n\n<br>\n\n- `fetchdem()` to download the data\n- `summarizedem()` provides searchable table of indicators with summary stats\n- `searchdem()` to search for specific indicators or all indicators used to construct an index\n- See the [vdemlite documentation](https://eteitelbaum.github.io/vdemlite/articles/vdemlite.html) for more details\n\n## `fetchdem()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemlite) # to download V-Dem data\n\n# Polyarchy and clean elections index for USA and Sweden for 2000-2020\ndem_indicators <- fetchdem(indicators = c(\"v2x_polyarchy\", \"v2xel_frefair\"),\n                           countries = c(\"USA\", \"SWE\"))\n\n# View the data\nglimpse(dem_indicators)\n```\n:::\n\n\n## `summarizedem()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summary statistics for the polyarchy index\nsummarizedem(indicator = \"v2x_polyarchy\")\n```\n:::\n\n\n## `searchdem()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearchdem()\n```\n:::\n\n\n## Your Turn\n\n<br>\n\n- Look at the [vdemlite documentation](https://eteitelbaum.github.io/vdemlite/articles/vdemlite.html)\n- Try using `searchdem()` to find an indicator you are interested in using\n- Use `summarizedem()` to get summary statistics for that variable\n- Use `fetchdem()` to download the data for that variable for a country or countries of interest\n- Try using `mutate()` to add region codes to the data \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}