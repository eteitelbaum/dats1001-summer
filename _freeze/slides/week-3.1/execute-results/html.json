{
  "hash": "56dc98e4408a9c2edccafea094815437",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Grammar of Graphics\ndate: today\ndate-format: long\nfooter: \"[DATS 1001 Website](https://ds4all.rocks)\"\nlogo: images/ds4all-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n## Types of Visualizations {.smaller}\n\n<br>\n\n::: {.incremental}\n- Column charts (bar charts)\n  - Use to compare values across categories\n- Histograms\n  - Use to show distribution of a single variable\n- Line charts \n  - Use to show trends over time\n  - Can use column charts but not as effective\n- Scatter plots\n  - Use to show relationships between two variables\n  - X-axis is usually explanatory variable, Y-axis is outcome variable\n:::\n\n## The Grammar of Graphics\n\n::: {.incremental}\n- Data viz has a language with its own grammar\n- Basic components include:\n  - Data we are trying to visualize\n  - Aesthetics (dimensions)\n  - Geom (e.g. bar, line, scatter plot)\n  - Color scales\n  - Themes\n  - Annotations\n::: \n  \n## \n\n<br>\n\nLet's start with the first two, the data and the aesthetic, with a column chart example...\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nlibrary(readr)\nlibrary(ggplot2)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n\nggplot(dem_summary, aes(x = region, y = polyarchy)) \n```\n:::\n\n##\n\nThis gives us the axes without any visualization:\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart2-1.png){width=960}\n:::\n:::\n\n\n##\n\n<br>\n\nNow let's add a geom. In this case we want a column chart so we *add* `geom_col()`.\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col()\n```\n:::\n\n## \n\nThat gets the idea across but looks a little depressing, so...\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart4-1.png){width=960}\n:::\n:::\n\n## \n\n<br>\n\n...let's change the color of the columns by specifying `fill = \"steelblue\"`.\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col(fill = \"steelblue\")\n```\n:::\n\n<br>\n\n::: {.callout-tip}\nSee [here](http://sape.inf.usi.ch/quick-reference/ggplot2/colour) for more available `ggplot2` colors. \n:::\n\n## \n\nNote how color of original columns is simply overwritten:\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart6-1.png){width=960}\n:::\n:::\n\n## \n\n<br>\n\nNow let's *add* some labels with the `labs()` function:\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-8\"}\nggplot(dem_summary, aes(x = region, y = polyarchy)) + \n  geom_col(fill = \"steelblue\") +\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n## \n\nAnd that gives us... \n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart8-1.png){width=960}\n:::\n:::\n\n## \n\nNext, we reorder the bars with `fct_reorder()` from the `forcats` package. \n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\nlibrary(forcats)\n\nggplot(dem_summary, aes(x = fct_reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n<br> \n\nNote that we could also use the base R `reorder()` function here.\n\n## \n\nThis way, we get a nice, visually appealing ordering of the bars according to levels of democracy...\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart10-1.png){width=960}\n:::\n:::\n\n## \n\n<br>\n\nNow let's change the theme to `theme_minimal()`. \n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8-9\"}\nggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    ) + \n  theme_minimal()\n```\n:::\n\n<br>\n\n::: {.callout-tip}\nSee [here](https://ggplot2.tidyverse.org/reference/ggtheme.html) for available `ggplot2` themes.\n:::\n\n## \n\nGives us a clean, elegant look. \n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart12-1.png){width=960}\n:::\n:::\n\n\n##\n\n<br>\n\nNote that you can also save your plot as an object to modify later.\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\")\n```\n:::\n\n##\n\nWhich gives us...\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart14-1.png){width=960}\n:::\n:::\n\n## \n\n<br> \n\nNow let's add back our labels... \n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- dem_bar_chart +\n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 1990 - present\", \n    caption = \"Source: V-Dem Institute\"\n    )\n```\n:::\n\n##\n\nSo now we have... \n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart16-1.png){width=960}\n:::\n:::\n\n## \n\n<br> \n\nAnd now we'll add back our theme...\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart <- dem_bar_chart + theme_minimal()\n```\n:::\n\n##\n\nVoila! \n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart\n```\n\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart18-1.png){width=960}\n:::\n:::\n\n##\n\nChange the theme. There are many [themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) to choose from.\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_bar_chart + theme_bw()\n```\n\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/barchart19-1.png){width=960}\n:::\n:::\n\n## Your Turn! {.smaller}\n\n<br>\n\n1. `glimpse()` the data\n2. Find a new variable to visualize^[Data for GDP per capita spotty after 2015]\n3. Make a bar chart with it\n4. Change the [color](http://sape.inf.usi.ch/quick-reference/ggplot2/colour) of the bars\n5. Order the bars\n6. Add labels\n7. Add a [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n8. Try saving your plot as an object\n9. Then change the labels and/or theme\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# Histograms\n\n## Purpose of Histograms\n\n<br> \n\n- Histograms are used to visualize the distribution of a single variable\n- x-axis represents value of variable of interest\n- y-axis represents the frequency of that value\n\n## Purpose of Histograms\n\n<br>\n\n- They are generally used for continuous variables (e.g., income, age, etc.)\n    - A *continuous* variable is one that can take on any value within a range (e.g., 0.5, 1.2, 3.7, etc.)\n    - A *discrete* variable is one that can only take on certain values (e.g., 1, 2, 3, etc.)\n- Typically, the height of the bar represents the number of observations which fall in that bin\n\n## Example\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/histogram1-1.png){width=960}\n:::\n:::\n\n## Histogram Code\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2|4-6|8-10\"}\n# load dplyr\n\nlibrary(dplyr)\n\n# load data\ndem_women <- read_csv(\"data/dem_women.csv\")\n\n# filter to 2022\ndem_women_2022 <- dem_women |>\n  filter(year == 2022) \n\n# create histogram\nggplot(dem_women_2022, aes(x = flfp)) +\n  geom_histogram(fill = \"steelblue\") + \n  labs(\n    x = \"Percentage of Working Aged Women in Labor Force\",\n    y = \"Number of Countries\",\n    title = \"Female labor force participation rates, 2022\",\n    caption = \"Source: World Bank\"\n    ) + theme_minimal()\n```\n:::\n\n## Histogram Code\n\n<br>\n\nNote that you only need to specify the x axis variable in the `aes()` function. `ggplot2` will automatically visualize the y-axis for a histogram.\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"0-1\"}\nggplot(dem_women_2022, aes(x = flfp)) +\n  geom_histogram(bins = 50, fill = \"steelblue\") + \n  labs(\n    x = \"Percentage of Working Aged Women in Labor Force\",\n    y = \"Number of Countries\",\n    title = \"Female labor force participation rates, 2022\",\n    caption = \"Source: World Bank\"\n    ) + theme_minimal()\n```\n:::\n\n## Change Number of Bins\n\n<br>\n\nChange number of bins (bars) using `bins` or `binwidth` arguments (default number of bins = 30):\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(dem_women_2022, aes(x = flfp)) +\n  geom_histogram(bins = 50, fill = \"steelblue\") + \n  labs(\n    x = \"Percentage of Working Aged Women in Labor Force\",\n    y = \"Number of Countries\",\n    title = \"Female labor force participation rates, 2022\",\n    caption = \"Source: World Bank\"\n    ) + theme_minimal()\n```\n:::\n\n##\n\nAt 50 bins...\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/histogram4-1.png){width=960}\n:::\n:::\n\n##\n\nAt 100 bins...probably too many!\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/histogram5-1.png){width=960}\n:::\n:::\n\n## \n\n<br>\n\nUsing `binwidth` instead of `bins`... \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggplot(dem_women_2022, aes(x = flfp)) +\n  geom_histogram(binwidth = 2, fill = \"steelblue\") + \n  labs(\n    x = \"Percentage of Working Aged Women in Labor Force\",\n    y = \"Number of Countries\",\n    title = \"Female labor force participation rates, 2022\",\n    caption = \"Source: World Bank\"\n    ) + theme_minimal()\n```\n:::\n\n##\n\nSetting `binwidth` to 2...\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/histogram7-1.png){width=960}\n:::\n:::\n\n## Change from Count to Density\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,5\"}\nggplot(dem_women_2022, aes(after_stat(density), x = flfp)) +\n  geom_histogram(fill = \"steelblue\") + \n  labs(\n    x = \"Percentage of Working Aged Women in Labor Force\",\n    y = \"Density\",\n    title = \"Female labor force participation rates, 2022\",\n    caption = \"Source: World Bank\"\n    ) + theme_minimal()\n```\n:::\n\n<br>\n\nFor densities, the total area sums to 1. The height of a bar represents the probability of observations in that bin (rather than the number of observations).\n\n## \n\nWhich gives us... \n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.1_files/figure-revealjs/histogram9-1.png){width=960}\n:::\n:::\n\n## Your Turn! {.smaller}\n\n<br>\n\n1. Pick a variable that you want to explore the distribution of^[Data for GDP per capita spotty after 2015] \n2. Make a histogram\n    a. Only specify `x = ` in `aes()`\n    b. Specify geom as `geom_histogram`\n3. Choose color for bars\n4. Choose appropriate labels\n5. Change number of bins\n6. Change from count to density\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [
      "week-3.1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}