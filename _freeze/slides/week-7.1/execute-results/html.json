{
  "hash": "a48251a97ed86a813f0611082125aa6b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Tidying Data\ndate: today\ndate-format: long\nfooter: \"[DATS 1001 Website](https://ds4all.rocks)\"\nlogo: images/ds4all-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n\n# Tidying Data\n\n## What is Tyding Data? \n\n- Earlier we talked about the concept of \"tidy data\"\n  - Each variable forms a column\n  - Each observation is in a row\n  - Each cell has a single value \n- The process of tidying data involves reshaping (or pivoting) data into a tidy format\n- We want to use the `pivot_longer()` or `pivot_wider()` functions from `tidyr` to do this\n\n## \n\n**Query:** Are these data in a tidy format? \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nsmiths\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  subject     time   age weight height\n  <chr>      <dbl> <dbl>  <dbl>  <dbl>\n1 John Smith     1    33     90   1.87\n2 Mary Smith     1    NA     NA   1.54\n```\n\n\n:::\n:::\n\n\n\n<br> \n\n::: {.callout-tip}\nTo get a list of data frames available in a package use the `data()` function, e.g. `data(package = \"tidyr\")`. \n:::\n\n## {.smaller}\n\n<br>\n\nHow about these data? \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld_bank_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,064 × 20\n   country indicator      `2000`  `2001`  `2002`  `2003`  `2004`  `2005`  `2006`\n   <chr>   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 ABW     SP.URB.TOTL    4.16e4 4.20e+4 4.22e+4 4.23e+4 4.23e+4 4.24e+4 4.26e+4\n 2 ABW     SP.URB.GROW    1.66e0 9.56e-1 4.01e-1 1.97e-1 9.46e-2 1.94e-1 3.67e-1\n 3 ABW     SP.POP.TOTL    8.91e4 9.07e+4 9.18e+4 9.27e+4 9.35e+4 9.45e+4 9.56e+4\n 4 ABW     SP.POP.GROW    2.54e0 1.77e+0 1.19e+0 9.97e-1 9.01e-1 1.00e+0 1.18e+0\n 5 AFE     SP.URB.TOTL    1.16e8 1.20e+8 1.24e+8 1.29e+8 1.34e+8 1.39e+8 1.44e+8\n 6 AFE     SP.URB.GROW    3.60e0 3.66e+0 3.72e+0 3.71e+0 3.74e+0 3.81e+0 3.81e+0\n 7 AFE     SP.POP.TOTL    4.02e8 4.12e+8 4.23e+8 4.34e+8 4.45e+8 4.57e+8 4.70e+8\n 8 AFE     SP.POP.GROW    2.58e0 2.59e+0 2.61e+0 2.62e+0 2.64e+0 2.67e+0 2.70e+0\n 9 AFG     SP.URB.TOTL    4.31e6 4.36e+6 4.67e+6 5.06e+6 5.30e+6 5.54e+6 5.83e+6\n10 AFG     SP.URB.GROW    1.86e0 1.15e+0 6.86e+0 7.95e+0 4.59e+0 4.47e+0 5.03e+0\n# ℹ 1,054 more rows\n# ℹ 11 more variables: `2007` <dbl>, `2008` <dbl>, `2009` <dbl>, `2010` <dbl>,\n#   `2011` <dbl>, `2012` <dbl>, `2013` <dbl>, `2014` <dbl>, `2015` <dbl>,\n#   `2016` <dbl>, `2017` <dbl>\n```\n\n\n:::\n:::\n\n\n\n# Pivot Longer\n\n## Pivot Longer\n\n<br>\n\n`pivot_longer()` takes three arguments:\n\n- **cols** - which columns you want to pivot\n- **names_to** - the name of the column where the old column names are going to (identifier)\n- **values_to** - the name of the column where the values are going to\n\n## Example: WB Population Data\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\n\n# Pivot using pivot_longer\n\nlong_pop_data <- world_bank_pop |>\n  pivot_longer(\n    cols = `2000`:`2017`,   # The columns you want to pivot (years)\n    names_to = \"year\",      # New column name for the years\n    values_to = \"pop\"       # New column name for the values\n  ) \n\n# View the tidied data\nlong_pop_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19,152 × 4\n   country indicator   year    pop\n   <chr>   <chr>       <chr> <dbl>\n 1 ABW     SP.URB.TOTL 2000  41625\n 2 ABW     SP.URB.TOTL 2001  42025\n 3 ABW     SP.URB.TOTL 2002  42194\n 4 ABW     SP.URB.TOTL 2003  42277\n 5 ABW     SP.URB.TOTL 2004  42317\n 6 ABW     SP.URB.TOTL 2005  42399\n 7 ABW     SP.URB.TOTL 2006  42555\n 8 ABW     SP.URB.TOTL 2007  42729\n 9 ABW     SP.URB.TOTL 2008  42906\n10 ABW     SP.URB.TOTL 2009  43079\n# ℹ 19,142 more rows\n```\n\n\n:::\n:::\n\n\n\n## \n\n<br>\n\nThis is better, usable even, but are we done if we want a tidy data frame? \n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19,152 × 4\n   country indicator   year    pop\n   <chr>   <chr>       <chr> <dbl>\n 1 ABW     SP.URB.TOTL 2000  41625\n 2 ABW     SP.URB.TOTL 2001  42025\n 3 ABW     SP.URB.TOTL 2002  42194\n 4 ABW     SP.URB.TOTL 2003  42277\n 5 ABW     SP.URB.TOTL 2004  42317\n 6 ABW     SP.URB.TOTL 2005  42399\n 7 ABW     SP.URB.TOTL 2006  42555\n 8 ABW     SP.URB.TOTL 2007  42729\n 9 ABW     SP.URB.TOTL 2008  42906\n10 ABW     SP.URB.TOTL 2009  43079\n# ℹ 19,142 more rows\n```\n\n\n:::\n:::\n\n\n\n## \n\n<br>\n\nIssue is that the data are in long form (which is OK for some purposes), but we want to make it wider. Wider, but tidy... \n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19,152 × 4\n   country indicator   year    pop\n   <chr>   <chr>       <chr> <dbl>\n 1 ABW     SP.URB.TOTL 2000  41625\n 2 ABW     SP.URB.TOTL 2001  42025\n 3 ABW     SP.URB.TOTL 2002  42194\n 4 ABW     SP.URB.TOTL 2003  42277\n 5 ABW     SP.URB.TOTL 2004  42317\n 6 ABW     SP.URB.TOTL 2005  42399\n 7 ABW     SP.URB.TOTL 2006  42555\n 8 ABW     SP.URB.TOTL 2007  42729\n 9 ABW     SP.URB.TOTL 2008  42906\n10 ABW     SP.URB.TOTL 2009  43079\n# ℹ 19,142 more rows\n```\n\n\n:::\n:::\n\n\n\n# Pivot Wider\n\n## Pivot Wider\n\n<br>\n\n`pivot_wider()` takes three main arguments:\n\n- **names_from** - the column whose values will become new column names (identifier)\n- **values_from** - the column containing the values that will fill the new columns\n- **values_fill** (optional) - specifies what to use for missing values (e.g., `NA`, `0`)\n\n## `pivotwider()` the WB Data {.smaller}\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivot wider\ntidy_pop_data <- long_pop_data |>\n  pivot_wider(\n    names_from = indicator, \n    values_from = pop\n  )\n\n# view the data\ntidy_pop_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,788 × 6\n   country year  SP.URB.TOTL SP.URB.GROW SP.POP.TOTL SP.POP.GROW\n   <chr>   <chr>       <dbl>       <dbl>       <dbl>       <dbl>\n 1 ABW     2000        41625      1.66         89101       2.54 \n 2 ABW     2001        42025      0.956        90691       1.77 \n 3 ABW     2002        42194      0.401        91781       1.19 \n 4 ABW     2003        42277      0.197        92701       0.997\n 5 ABW     2004        42317      0.0946       93540       0.901\n 6 ABW     2005        42399      0.194        94483       1.00 \n 7 ABW     2006        42555      0.367        95606       1.18 \n 8 ABW     2007        42729      0.408        96787       1.23 \n 9 ABW     2008        42906      0.413        97996       1.24 \n10 ABW     2009        43079      0.402        99212       1.23 \n# ℹ 4,778 more rows\n```\n\n\n:::\n:::\n\n\n\n## `pivotwider()` the WB Data\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,788 × 6\n   country year  SP.URB.TOTL SP.URB.GROW SP.POP.TOTL SP.POP.GROW\n   <chr>   <chr>       <dbl>       <dbl>       <dbl>       <dbl>\n 1 ABW     2000        41625      1.66         89101       2.54 \n 2 ABW     2001        42025      0.956        90691       1.77 \n 3 ABW     2002        42194      0.401        91781       1.19 \n 4 ABW     2003        42277      0.197        92701       0.997\n 5 ABW     2004        42317      0.0946       93540       0.901\n 6 ABW     2005        42399      0.194        94483       1.00 \n 7 ABW     2006        42555      0.367        95606       1.18 \n 8 ABW     2007        42729      0.408        96787       1.23 \n 9 ABW     2008        42906      0.413        97996       1.24 \n10 ABW     2009        43079      0.402        99212       1.23 \n# ℹ 4,778 more rows\n```\n\n\n:::\n:::\n\n\n\n# Exercise\n\n## Download Some Messy Data\n\n<br>\n\n- Download some messy WB data\n- Make it multiple variables\n- Download as a CSV file\n- Save in your project `/data` folder\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){width=70%}\n\n\n## Read Data \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(readr) \nlibrary(dplyr) \n\n# Read data from csv file into an object called \"wb_data_messy\"\nwb_data_messy <- read_csv(\"data/your_file_name.csv\")\n\n# View the data\nglimpse(wb_data_messy)\n```\n:::\n\n\n\n## Pivot the Data\n\n<br>\n\n- Use `pivot_longer()` to get the data in long form\n- Use `pivot_wider()` to get the series in the columns\n\n## Special Considerations\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyr\nlibrary(tidyr)\n\n# Reshape the data\nwb_data <- wb_data_messy |> \n  pivot_longer(             \n    cols = `1973 [YR1973]`: `2022 [YR2022]`, # columns to pivot\n    names_to = \"year\", # name the identifier column \"year\"\n    values_to = \"values\" # name the numeric var column \n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n## Special Considerations\n  \n<br>\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_data <- wb_data |>\n  select(-`Series Name`)\n\n# Reshape the data\ntidy_data <- wb_data |> \n  pivot_wider(             \n    names_from = `Series Code`,\n    values_from = values\n  ) \n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n## Give it a Shot!\n\n<br>\n\n- Try downloading some messy WB data and make it tidy\n- Refer to previous slides for help\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# Mutate\n\n## Mutating Variables\n\n<br>\n\n- Anytime we want to change a variable, we are going to use the `dplyr` verbs `mutate()` or `mutate_at()`\n- `mutate()` is if you want to change on variable\n- Use `across()` for multiple variables\n\n## Let's Fix Our Variables\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix year and flfp\nwb_data <- wb_data |> \n  mutate(year = substring(year, 1, 4)) |>  # truncate year\n  mutate(across(c(\"year\", \"flfp\"), as.numeric))  # convert year and flfp to numeric\n\n# View the data\nglimpse(wb_data)\n```\n:::\n\n\n\n## Now Try it With Multiple Varaibles\n\n<br>\n\n- Go to the data frame with multiple variables that you created earlier\n- How would you modify this code to make sure the variables are in the right format? \n\n## Clean Variable Names\n\n<br>\n\n| Very simple: use the `janitor` package!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load janitor\nlibrary(janitor)\n\n# Apply clean_names() to wb_data, store in new data frame called wb_data_clean\nwb_data_clean <- wb_data |>  \n  clean_names() \n\n# Write wb_data_clean to a csv file\nwrite_csv(wb_data_clean, \"data/wb_data_clean.csv\")\n\n# View the data\nglimpse(wb_data_clean)\n```\n:::\n\n\n\n## Column Specifications\n\n<br>\n\n- Can clean columns on backend\n- But can also specify data types in `read_csv()` or `read_excel()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(wb_data_messy) # show column specifications (from `readr`)\n\nwb_data_messy <- read_csv(\"data/your_file_name.csv\", \n                          col_types = cols(\n                           col_double(`1990 [YR1990]`) \n                          ))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}