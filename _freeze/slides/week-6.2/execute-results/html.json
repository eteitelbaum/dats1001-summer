{
  "hash": "8ef4e55a9764720264cf74213e5204a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Merging Data Frames\ndate: today\ndate-format: long\nfooter: \"[DATS 1001 Website](https://ds4all.rocks)\"\nlogo: images/ds4all-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n   # multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n\n# What is a Join\n\n## Horizontal Join (Merge)\n\n<br>\n\n- Often we have data from two different sources\n- Results in two data frames\n- How to make them one so we can analyze? \n\n## Illustration\n\n![*Source: R for HR*](images/join.png)\n\n## Types of Joins in `dplyr`\n\n- Mutating versus filtering joins\n- Four types of mutating joins\n  - `inner_join()`\n  - `full_join()`\n  - `left_join()`\n  - `right_join()`\n- For the most part we will use `left_join()`  \n\n## `inner_join()`\n\n<br>\n\n![*Source: R for HR*](images/inner_join.png)\n\n## `full_join()`\n\n<br>\n\n![*Source: R for HR*](images/full_join.png)\n\n## `left_join()`\n\n<br>\n\n![*Source: R for HR*](images/left_join.png)\n\n## `right_join()`\n\n<br>\n\n![*Source: R for HR*](images/right_join.png)\n\n# Worked Example \n\n## Scenario\n\n<br>\n\n- We want to merge two data frames\n- One is from the World Bank\n- The other is from V-Dem\n- How do we do it?\n\n## Grab Some WB Data\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(wbstats) \nlibrary(dplyr) \nlibrary(janitor) \n\n# Store the list of indicators in an object\nindicators <- c(\"flfp\" = \"SL.TLF.CACT.FE.ZS\", \"women_rep\" = \"SG.GEN.PARL.ZS\") \n\n# Download the data  \nwb_dta <- wb_data(indicators, mrv = 25) |> # most recent 25 years\n  select(!iso2c) |> \n  rename(year = date) |> \n  mutate(\n    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th\n    women_rep = round_to_fraction(women_rep, denominator = 100) \n  )\n\n# View the data\nglimpse(women_emp) \n```\n:::\n\n\n\n\n## Grab Some V-Dem Data\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vdemlite)\n\nvdem_dta <- fetchdem(indicators = c(\"v2x_gender\", \"v2x_gencl\", \"e_regionpol_6C\") |>\n                         start_year = 2000, end_year = 2020) |> # 20 year span\n                 rename(\n                   women_polemp = v2x_gender,\n                   women_civlib = v2x_gencl,\n                   region = e_regionpol_6C\n                 ) |>\n            mutate(\n              region = case_match(region, \n                                  1 ~ \"Eastern Europe\", \n                                  2 ~ \"Latin America\",  \n                                  3 ~ \"Middle East\",   \n                                  4 ~ \"Africa\", \n                                  5 ~ \"The West\", \n                                  6 ~ \"Asia\")\n              )\n\nglimpse(vdem_dta)\n```\n:::\n\n\n\n## Key Questions\n\n<br>\n\n- What is the unit of analysis? \n- What is/are the corresponding identifier variables?\n- Are the identifier variables in common? \n- Or do they have to be added/transformed to match?\n  \n## Merging WB and V-Dem Data\n\n<br>\n\n- These are both time-series, country-level data\n- Need to merge by country-year\n- Year is easy\n- But there are many different country codes\n- Can use `countrycode` package to assign country codes\n\n## Use `countrycode` \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load countrycode\nlibrary(countrycode)\n\n# Create new iso3c variable\nvdem_data <- vdem_data |>    \n  mutate(iso3c = countrycode(sourcevar = country_id, # what we are converting\n        origin = \"vdem\",         # we are converting from vdem\n        destination = \"wb\"))  |> # and converting to the WB iso3c code \n  relocate(iso3c, .after = country_id) # move iso3c \n\n# View the data\nglimpse(dem_data)\n```\n:::\n\n\n\n## Try it Yourself\n\n<br>\n\n- Using your democracy data frame from the last lesson\n- Use `mutate()` and `countrycode()` to add iso3c country codes\n- Use `relocate` to move your iso3c code to the \"front\" of your data frame (optional)\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_1f473407\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Use `left_join()` to Merge\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform left join using common iso3c variable and year\ndem_wb <- left_join(vdem_dta, wb_dta, by = c(\"iso3c\", \"year\")) |> #join\n  select(-c(country_text_id, country_id, country)) # drop extra country variables\n  \n# View the data\nglimpse(dem_wb)  \n```\n:::\n\n\n\n## Try it Yourself\n\n- Take your V-Dem data frame and your World Bank data frame\n- Using `left_join()` to merge on country code and year\n- Along the way, use `rename()` and `select()` to insure you have just one country name\n- Try `inner_join()`, `full_join()`, and `right_join()` as time allows\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e3bf480b\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Summarize the Data\n\n<br>\n\n- Do a group, summarize, arrange sequence on your merged data frame\n- Group and summarize by country (mean or median)\n- Try using `across()` to summarize multiple columns at once\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_22ed4ee2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Create a Scatter Plot\n\n<br>\n\n- Now you have one data point per country\n- Use `ggplot2` to create a scatter plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_5f7f97c9\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}