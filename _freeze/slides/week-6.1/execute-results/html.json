{
  "hash": "73f233925f7cd74ad909d37f356fadc3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: The Grammar of Data Wrangling\ndate: today\ndate-format: long\nfooter: \"[DATS 1001 Website](https://ds4all.rocks)\"\nlogo: images/ds4all-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n\n# `filter()`<br>`select()`<br>`mutate()`\n\n## Downloading V-Dem Data\n\n<br>\n\nThe `vdem` function from `vdemdata` just downloads all of the data. Try running this code chunk. What do you see in `democracy`?\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vdemdata) # load the V-Dem package\n\ndemocracy <- vdem() # download the V-Dem dataset\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## `filter()`\n\n- Run this code. What do you see?\n- Try changing the year \n- For one year, use `==` instead of `>=`\n- Or try `<=` and see what happens \n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year >= 1990) # filter out years less than 1990\n  \nglimpse(democracy)  \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"top:10%;right:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## `=` versus `==`\n\n<br>\n\n- `=` is used to assign values to variables, just like `<-`\n- `==` is used to test if two values are equal to each other\n- So `filter(year == 1990)` will give you just the observations for 1990\n\n## `>=` and `<=`\n\n- `>=` is used to test if a value is greater than or equal to another value\n- `<=` is used to test if a value is less than or equal to another value\n- So `filter(year >= 1990)` will give you the observations for 1990 and later\n- And `filter(year <= 1990)` will give you the observations for 1990 and earlier\n\n## `select()`\n\n- Run this code. What do you see?\n- Now try `v2x_libdem` instead of `v2x_polyarchy`\n- Choose more from the [codebook](https://v-dem.net/documents/24/codebook_v13.pdf) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- vdem |> # download the V-Dem dataset\n  select(                  # select (and rename) these variables\n    country = country_name,     # before the = sign is new name  \n    vdem_ctry_id = country_id,  # after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy\n  )\n  \nglimpse(democracy)  \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## `mutate()`\n\n- Modify the code to create new variable that is three times the value of `polyarchy` \n- How about `polyarchy` squared? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015) |> # keep only observations from 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # name before the = sign is new name  \n    vdem_ctry_id = country_id,  # name after the = sign is old name\n    year, \n    polyarchy = v2x_polyarchy \n    ) |>\n  mutate(\n    polyarchy_dbl = polyarchy * 2 # create variable 2X polyarchy\n  )\n  \nglimpse(democracy)  \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_02732fba\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Some Common Arithmetic Operators\n\n<br>\n\n- `+` addition\n- `-` subtraction\n- `*` multiplication\n- `/` division\n- `^` exponentiation (also `**`)\n\n## `vdemdata` Example {.smaller}\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015)  |> # filter year, keep 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n\n## {.smaller}\n\n<br>\n\nUse `filter()` to select years...\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> # keep 2015\n  select(                 \n    country = country_name,       \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region,\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n:::\n\n\n\n## {.smaller}\n\n<br>\n\nUse `select()` to choose variables...\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-11\"}\n# Download the data\ndemocracy <- vdem |> \n  filter(year == 2015)  |> \n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, \n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n```\n:::\n\n\n\n## {.smaller}\n\n<br>\n\nUse `mutate` with `case_match()` to Recode Region....\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12-23\"}\n# Download the data\ndemocracy <- vdem |>\n  filter(year == 2015)  |> \n  select(                  \n    country = country_name,     \n    vdem_ctry_id = country_id,  \n    year, \n    polyarchy = v2x_polyarchy, \n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n                    # number on the left of the ~ is the V-Dem region code\n                    # we are changing the number to the country name on the right\n                    # of the equals sign\n  )\n```\n:::\n\n\n\n## Your Turn!\n\n<br>\n\nHave a look at the [V-Dem codebook](https://v-dem.net/documents/38/V-Dem_Codebook_v14.pdf)\n\n<br>\n\n- filter the data for the year 2010\n- select a different democracy indicator\n- use a different region variable (e.g., `e_regionpol_7C`)\n\n# `group_by()` <br> `summarize()` <br> `arrange()`\n\n## Group, Summarize and Arrange\n\n<br>\n\n- `group_by()`, `summarize()`, `arrange()`\n- A very common sequence in data science:\n  - Take an average or some other statistic for a group\n  - Rank from high to low values of summary value\n  \n## Example\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# group_by(), summarize() and arrange()\ndemocracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy_mean = mean(polyarchy, na.rm = TRUE), # calculate mean after remove NAs\n    libdem_median = median(libdem, na.rm = TRUE), # calculate median after remove NAs\n    gender = sd(gender, na.rm = TRUE), # calculate std. dev after remove NAs\n    gdp_pc = min(gdp_pc, na.rm = TRUE) # calculate minimum flfp after remove NAs\n  ) |> \n  arrange(desc(polyarchy_mean)) # arrange in descending order by polyarchy score\n```\n:::\n\n\n\n## \n\n<br>\n\nUse `across()` to Apply Same Function to Multiple Columns\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_women |>\n  group_by(region) |> \n  summarize(\n    across(c(polyarchy, libdem, women_rep, flfp), # apply to these columns \n           mean, # take the mean of the columns\n           na.rm = TRUE,  # remove NAs\n           .names = \"mean_{col}\") # change the suffix of the vars\n  ) |> \n  arrange(desc(mean_polyarchy))\n```\n:::\n\n\n\n\n## Try it Yourself {.scrollable}\n\nNow try grouping by country instead of region and filter for years >= 2000.\n\n  a. What is the median value of `polyarchy` for Sweden? \n  b. What is the max value of `libdem` New Zealand?\n  c. What is the standard deviation of `gender` for Norway?\n  d. What is the min of `gdp_pc` for Germany?\n\nTry using `across()` to calculate the mean of `polyarchy`, `libdem`, `gender1` and `gdp_pc` for each country.\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}