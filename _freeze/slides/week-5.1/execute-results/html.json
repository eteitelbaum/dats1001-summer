{
  "hash": "f0a94cba93fa40a8f61a65d369eafc65",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Understanding Data\"\nsubtitle: \"Sources and Structure\"\ndate: today\ndate-format: long\nfooter: \"[DATS 1001 Website](https://ds4all.rocks)\"\nlogo: images/ds4all-logo.png\nfrom: markdown+emoji\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\n    #multiplex: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n# Preliminaries\n\n## Where Does Data Come From?\n\n<br>\n\nThoughts? :sunglasses: :thought_balloon:\n\n. . .\n\n:::{.incremental}\n- Your boss or a client sends you a file\n- Survey data collected by you or someone else \n- You can download it from a website \n- You can scrape it from a website\n- A data package (e.g. `unvotes`)\n- You can access it through an API\n:::\n\n## Getting Started with Data {.smaller}\n\n<br>\n\n::: {.incremental}\n- *Tabular data* is data that is organized into rows and columns\n  - a.k.a. *rectangular data*\n- A *data frame* is a special kind of tabular data used in data science\n- A *variable* is something you can measure \n- An *observation* is a single unit or case in your data set\n- The *unit of analysis* is the level at which you are measuring\n  - In a cross-section: country, state, county, city, individual, etc.\n  - In a time-series: year, month, day, etc.\n:::\n\n# Adjectives for Your Data\n\n## The Concept of \"Tidy Data\"\n\n<br>\n\n- Each column represents a single variable\n- Each row represents a single observation\n- Each cell represents a single value\n\n## Tidy Data Example\n\n![](images/tidy_data.jpg)\n\n## What are Clean Data?\n\n- Column names are easy to work with and are not duplicated\n- Missing values have been dealt with\n- There are no repeated observations or columns\n- There are no blank observations or columns\n- The data are in the proper format, for example dates should be formatted as dates\n\n## Messy Data Example\n\n![](images/messy_wb_data.jpg){width=70%}\n\n## Which of These is Likely Tidy/Clean?\n\n<br>\n\n- Your boss or a client sends you a file\n- Survey data collected by you or someone else \n- You can download it from a website \n- You can scrape it from a website\n- A curated collection (e.g. `unvotes`)\n- You can access it through an API\n\n## How Do We Get Tidy/Clean Data? \n\n<br>\n\n- Get lucky and find it\n- Wrangle it ourselves\n- Use a package where it has been wrangled for us\n- Download via an API\n\n# Reading Data\n\n## Read Data into R\n\n<br>\n\n- Use `read_csv()` function from `readr` package\n- `readr` package is part of the `tidyverse`\n- Can do more with it than base R functions\n\n## R Code Review {.smaller}\n\n<br>\n\n::: {.incremental}\n- `<-` is the assignment operator\n  - Use it to assign values to objects\n- `#` is the comment operator\n  - Use it to comment out code or add comments\n  - Different function than in markdown text\n- To call a library, use `library()` and name of library\n  - name of library does not have to be in quotes, e.g. `library(readr)`\n  - only when you install it, e.g. `install.packages(\"readr\")`\n:::\n\n## Read Data into R\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2-3|5\"}\n# load libraries\nlibrary(readr)\nlibrary(dplry)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\") #notice file path\n\nglimpse(dem_summary)\n```\n:::\n\n\n## Viewing the Data in R\n\n<br>\n\nUse `glimpse()` to see the columns and data types:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\n# load libraries\nlibrary(readr)\nlibrary(dplyr)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n\nglimpse(dem_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 5\n$ region    <chr> \"The West\", \"Latin America\", \"Eastern Europe\", \"Asia\", \"Afri…\n$ polyarchy <dbl> 0.8709230, 0.6371358, 0.5387451, 0.4076602, 0.3934166, 0.245…\n$ gdp_pc    <dbl> 37.913054, 9.610284, 12.176554, 9.746391, 4.410484, 21.134319\n$ flfp      <dbl> 52.99082, 48.12645, 50.45894, 50.32171, 56.69530, 26.57872\n$ women_rep <dbl> 28.12921, 21.32548, 17.99728, 14.45225, 17.44296, 10.21568\n```\n\n\n:::\n:::\n\n\n# \n\nOr use `View()` or click on the name of the object in your Environment tab to see the data in a spreadsheet:\n\n![](images/view_df.gif){fig-align=\"center\"}\n\n## Try It Yourself!\n\n- Open the CSV file to see what it looks like\n- Then use this code to read it into R and view it\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\nlibrary(readr)\nlibrary(dplyr)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n\nglimpse(dem_summary)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Write a New CSV File\n\n<br>\n\nNow try writing the same data to a file with a different name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(dem_summary, \"data/your_new_file_name.csv\") \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Excel Files\n\n## Read in Excel File\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n\ndem_summary <- read_excel(\"data/dem_summary.xlsx\")\n\nglimpse(dem_summary)\n```\n:::\n\n\n## Try With Excel\n\n<br>\n\n- Read in the Excel file\n- Follow same steps as with CSV file\n  - use `read_excel()` to read in the data\n  - install and experiment with [writexl](https://cran.r-project.org/web/packages/writexl/index.html)\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Google Sheets\n\n## Import Data from Google Sheets\n\n<br>\n\n- Can use `googlesheets4`\n- Have a look at [these Gapminder data](https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit?gid=780868077#gid=780868077)\n- Use `gs4_deauth()` to authenticate\n- Then use `read_sheet()` to read in the data\n\n## Example Code\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\n\n# Deauthorize to access public sheets without credentials\ngs4_deauth()\n\n# Read in the gapminder Africa data\ngapminder_data <- read_sheet(\"1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY\")\n```\n:::\n\n\n## Or... \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\n\n# Deauthorize to access public sheets without credentials\ngs4_deauth()\n\n# Read in the gapminder Africa data\ngapminder_data <- read_sheet(\"1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY\")\n```\n:::\n\n\n## Or...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\n\n# Deauthorize to access public sheets without credentials\ngs4_deauth()\n\n# Read in the gapminder Africa data\ngapminder_data <- googledrive::drive_get(\"gapminder\") |>\n  read_sheet()\n```\n:::\n\n\n## Try It Yourself!\n\n<br>\n\n- Use the code above to read in the data\n- Try reading in Gapminder data for a different country\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Find Your Own Data\n\n<br>\n\n- Visit [kaggle.com](https://www.kaggle.com/datasets) \n- Find a dataset you like\n- Download it as a CSV\n- Upload to your Posit Cloud project\n- Read it into R\n- Explore with `glimpse()` and `View()`\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer5\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}