{
  "hash": "703a409bca6b017d497395d5d5db5741",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 2.4\"\nsubtitle: \"Joining Data Frames\"\nformat: \n  html:\n    code-link: true\nhighlight-style: atom-one\nexecute: \n  echo: true\n  message: false\n  warning: false\n---\n\n::: {.callout-tip}\n## Prework\n\n- Start a QMD file for this module.\n- Install the `WDI` package and study [the documentation](https://vincentarelbundock.github.io/WDI/)\n- Visit the [World Development Indicators database](https://databank.worldbank.org/source/world-development-indicators) and explore the available indicators.\n- Install the `countrycode` package and [read about it](https://vincentarelbundock.github.io/countrycode/).\n- Read about [mutating joins](https://dplyr.tidyverse.org/reference/mutate-joins.html) in `dplyr`.\n:::\n\n## Overview\n\nIn this module, we will learn how to join data frames in R using the `dplyr` package. Joining data frames is a fundamental operation in data analysis, allowing you to combine information from different sources based on common keys. We will explore various types of joins, including inner joins, left joins, right joins, and full joins, and apply a left join to merge two real-world datasets. \n\n\n## Packages for API Data\n\nAs more organizations publish their data online, APIs—Application Programming Interfaces—have become a standard way to provide structured access to that information. Rather than downloading spreadsheets or scraping websites, we can use R code to request data directly from a server and receive it in a tidy format.\n\nIn R, a growing number of packages are designed specifically to help you access data from these APIs. These tools handle the technical details of connecting to the API and parsing the response, so you can focus on analysis. Packages like `WDI` and `wbstats` (for World Bank data), `fredr` (for U.S. Federal Reserve data), and `tidycensus` (for U.S. Census data) make it much easier to pull data into your workflow with just a few lines of code.\n\nIn this module, we will use the `WDI` package by Vincent Arel-Bundock to access data from the World Bank’s open data API. The package provides a streamlined interface to over 40 datasets published by the World Bank, including the World Development Indicators, Gender Statistics, Education Statistics, and more. These databases cover a wide range of topics such as health, labor, infrastructure, environment, and governance, with data available for nearly every country in the world. The package returns the data in a tidy format, making it easy to integrate into your analysis workflow.\n\nThe basic syntax for using the `WDI` package is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(WDI)\nlibrary(dplyr)\n\nwbdata <- WDI(\n  indicator = \"NY.GDP.MKTP.CD\", # GDP in current US dollars\n  country = c(\"USA\", \"CAN\", \"MEX\"), # Countries to include\n  start = 2000, # Start year\n  end = 2020, # End year\n  extra = FALSE # Include extra metadata (default is FALSE)\n)\n\nglimpse(wbdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 63\nColumns: 5\n$ country        <chr> \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Cana…\n$ iso2c          <chr> \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"…\n$ iso3c          <chr> \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\",…\n$ year           <int> 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2…\n$ NY.GDP.MKTP.CD <dbl> 1.655685e+12, 1.743725e+12, 1.725329e+12, 1.649266e+12,…\n```\n\n\n:::\n:::\n\n\n::: {.callout-important}\n## ISO Country Codes\nThe `country` parameter takes either ISO aplha 2 or 3 codes which you can find [here](https://www.iban.com/country-codes). Familiarize yourself with these codes a bit as they will become important when we want merge datasets based on them.\n:::\n\nIf you want to download multiple indicators at once, you can pass a vector of indicator codes to the `indicator` parameter. You can also rename variables as you select them. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\nindicators <- c(gdp = \"NY.GDP.MKTP.CD\", population = \"SP.POP.TOTL\") \n\nwbdata2 <- WDI(\n  indicator = indicators, # GDP and total pop\n  country = c(\"USA\", \"CAN\", \"MEX\"),\n  start = 2000,\n  end = 2020\n)\n\nglimpse(wbdata2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 63\nColumns: 6\n$ country    <chr> \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\",…\n$ iso2c      <chr> \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\",…\n$ iso3c      <chr> \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CA…\n$ year       <int> 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,…\n$ gdp        <dbl> 7.447734e+11, 7.389818e+11, 7.606493e+11, 8.955406e+11, 1.0…\n$ population <dbl> 30685730, 31020855, 31359199, 31642461, 31938807, 32242732,…\n```\n\n\n:::\n:::\n\nThere are two ways to find indicators to download with `WDI`. One is to use the built-in `WDIsearch()` function to search for indicators by keyword, like this: \n\n::: {.cell}\n\n```{.r .cell-code}\nWDIsearch('labor force participation') |> \n  as_tibble() |> # Convert to tibble for easier viewing\n  slice(1:10) # Show first 10 results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   indicator         name                                                       \n   <chr>             <chr>                                                      \n 1 9.0.Labor.All     Labor Force Participation Rate (%)                         \n 2 9.0.Labor.B40     Labor Force Participation Rate (%)-Bottom 40 Percent       \n 3 9.0.Labor.T60     Labor Force Participation Rate (%)-Top 60 Percent          \n 4 9.1.Labor.All     Labor Force Participation Rate (%), Male                   \n 5 9.1.Labor.B40     Labor Force Participation Rate (%)-Bottom 40 Percent, Male \n 6 9.1.Labor.T60     Labor Force Participation Rate (%)-Top 60 Percent, Male    \n 7 9.2.Labor.All     Labor Force Participation Rate (%), Female                 \n 8 9.2.Labor.B40     Labor Force Participation Rate (%)-Bottom 40 Percent, Fema…\n 9 9.2.Labor.T60     Labor Force Participation Rate (%)-Top 60 Percent, Female  \n10 JI.TLF.ACTI.FE.ZS Labor force participation rate, aged 15-64, female (% of f…\n```\n\n\n:::\n:::\n\nOr with regular expressions like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nWDIsearch('labor.*participation.*female') |>\n    as_tibble() |> \n    slice(1:10) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   indicator                 name                                               \n   <chr>                     <chr>                                              \n 1 9.2.Labor.All             Labor Force Participation Rate (%), Female         \n 2 9.2.Labor.B40             Labor Force Participation Rate (%)-Bottom 40 Perce…\n 3 9.2.Labor.T60             Labor Force Participation Rate (%)-Top 60 Percent,…\n 4 JI.TLF.ACTI.FE.ZS         Labor force participation rate, aged 15-64, female…\n 5 SL.TLF.ACTI.1524.FE.NE.ZS Labor force participation rate for ages 15-24, fem…\n 6 SL.TLF.ACTI.1524.FE.ZS    Labor force participation rate for ages 15-24, fem…\n 7 SL.TLF.ACTI.FE.ZS         Labor force participation rate, female (% of femal…\n 8 SL.TLF.CACT.2534.FE.ZS    Labor participation rate, female (% of female popu…\n 9 SL.TLF.CACT.2554.FE.ZS    Labor participation rate, female (% of female popu…\n10 SL.TLF.CACT.3554.FE.ZS    Labor participation rate, female (% of female popu…\n```\n\n\n:::\n:::\n\n::: {.callout-note}\nA regular expression (or regex) is a special pattern used to match text. In WDIsearch(), regular expressions let you search for indicators based on the presence and order of words. For example, the pattern \"labor.\\*participation.\\*female\" matches any indicator name that contains the word \"labor,\" followed by \"participation,\" and then \"female,\" with any characters in between. See [this chapter](https://r4ds.hadley.nz/regexps) of *R for Data Science* for more on regular expressions.\n:::\n\nNote that here we are using the `dplyr` `slice()` function to limit the results to the first 10 rows. You can adjust this number as needed. The output will show you the indicator name, code, and description, which you can use in the `WDI()` function. We also convert the output to a tibble for easier viewing in a rendered Quarto document (but this is not necessary in a notebook or in the console).\n\nThe other way you can hunt for indicators is to browse the World Bank's [World Development Indicators database](https://databank.worldbank.org/source/world-development-indicators) directly. Here you can go to the Series tab and simply search for the indicator you are interested in. Then click on the information icon to view the indicator's code, which you can use in the `WDI()` function.\n\n::: {.callout-warning icon=false}\n## Your Turn!!\n\n- Use `WDIsearch()` to find an indicator of interest.\n- Use `WDI()` to download that variable for a country or set of countries.\n- Use `WDI()` to download multiple indicators at once.\n:::\n\n## Joining Datasets\n\nNow let's say that we have downloaded some data from the World Bank with `WDI` and now we want to merge it with another dataset. For example, we might want to analyze the relationship between some economic indicators like GDP and population, and some political indicators like democracy scores from the V-Dem dataset. To do this, we need to join the two datasets together based on a **common key**, which in this case is the country code.\n\nWhen we talk about a join in data wrangling, we are usually referring to a horizontal merge—that is, combining two data frames side by side by matching rows based on shared values in one or more columns (like country and year). This is common when we have data from two different sources, such as World Bank and V-Dem, and we want to analyze them together.\n\nIn dplyr, the most common joins fall into two categories: mutating joins and filtering joins. Mutating joins are the ones you’ll use most often when combining datasets. There are four main types.\n\nAn **inner join** keeps only the rows that match in both datasets. If a country-year pair is missing in either dataset, it will be dropped from the result.\n\n![*Source: R for HR*](images/inner_join.png)\n\nA **full join** keeps everything from both datasets. If a country-year pair exists in only one of them, you’ll still see it in the final data, with missing values (NA) filled in where needed.\n\n![*Source: R for HR*](images/full_join.png)\n\nA **left join** keeps all rows from the left dataset (typically the one you're focusing your analysis on) and adds columns from the right dataset wherever there’s a match.\n\n![*Source: R for HR*](images/left_join.png)\n\nA **right join** is like a left join, but it keeps all rows from the right dataset and adds data from the left wherever possible.\n\n![*Source: R for HR*](images/right_join.png)\n\nMost of the time, we will use a left join because we want to keep the structure of one main dataset and supplement it with additional information. The syntax for a left join in dplyr is straightforward:\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(data1, data2, by = \"common_column\")\n```\n:::\n\n## Common Keys (and the `countrycode` Package)\n\nThat brings us to our next point, which is that when we are joining datasets, it’s crucial to ensure that the columns you’re joining on have the same data type and format. For example, if one dataset uses ISO alpha-3 country codes (like \"USA\") and another uses alpha-2 codes (like \"US\"), you’ll need to standardize them before joining. \n\nIn the context of cross-country analysis, the `countrycode` package (also authored by Vincent Arel-Bundock) is immensely helpful. It allows you to convert between different country code formats, such as ISO alpha-2, alpha-3, numeric codes, and even country names. \n\nTo convert country codes using the `countrycode` package, you can use `mutate()` along with the `countrycode()` function. Let's try it with the `wbdata` dataset we created earlier:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(countrycode)\n\n# Convert World Bank ISO alpha-2 codes to V-Dem alpha-3 codes\nwbdata_with_vdem_codes <- wbdata |> \n  mutate(vdem_country_code = countrycode(\n    sourcevar = iso3c, \n    origin = \"wb\", \n    destination = \"vdem\")\n    ) |>\n  relocate(vdem_country_code, .after = iso3c)\n\nglimpse(wbdata_with_vdem_codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 63\nColumns: 6\n$ country           <chr> \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"C…\n$ iso2c             <chr> \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\"…\n$ iso3c             <chr> \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CA…\n$ vdem_country_code <dbl> 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, …\n$ year              <int> 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012…\n$ NY.GDP.MKTP.CD    <dbl> 1.655685e+12, 1.743725e+12, 1.725329e+12, 1.649266e+…\n```\n\n\n:::\n:::\n\nHere we are adding a new column to our `wbdata` dataset called `vdem_country_code`, which contains the V-Dem alpha-3 codes corresponding to the ISO alpha-2 codes in the `iso2c` column. The first argument in the `countrycode()` function is the vector of country codes that we want to convert, the second is the source code type (in this case, World Bank style iso3c codes or \"wb\"), and the third is the target code type (in this case, \"vdem\"). We also use the `dplyr` `relocate()` verb to move the new `vdem_country_code` column right after the original `iso3c` column for better organization.\n\n## Performing the Join\n\n{{< video https://youtu.be/wNF3ZPneHWw?si=TyiXrsAxgbdrztD4 title='Merge Two Data Frames with left_join()' >}}\n\nNow that we have our `wbdata` dataset with the V-Dem country codes, we can perform a left join with the V-Dem data. Let’s go ahead and use our skills from the last lesson to download the V-Dem data for the same countries and years as our World Bank data. We will use the `fetchdem()` function to get the democracy scores for the same countries and years as our World Bank data.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vdemlite)\n\n# Fetch democracy scores for the same countries and years as wbdata\ndemocracy_scores <- fetchdem(\n  indicators = c(\"v2x_polyarchy\", \"v2xel_frefair\"),\n  start_year = 2000, end_year = 2020\n)\n\nglimpse(democracy_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,741\nColumns: 6\n$ country_name    <chr> \"Mexico\", \"Mexico\", \"Mexico\", \"Mexico\", \"Mexico\", \"Mex…\n$ country_text_id <chr> \"MEX\", \"MEX\", \"MEX\", \"MEX\", \"MEX\", \"MEX\", \"MEX\", \"MEX\"…\n$ country_id      <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ year            <dbl> 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, …\n$ v2x_polyarchy   <dbl> 0.671, 0.682, 0.691, 0.699, 0.707, 0.707, 0.670, 0.642…\n$ v2xel_frefair   <dbl> 0.819, 0.826, 0.826, 0.847, 0.869, 0.869, 0.788, 0.718…\n```\n\n\n:::\n:::\n\nNow we can perform a left join to combine the two datasets based on the V-Dem country codes and the year. We will use the `left_join()` function from `dplyr` to do this:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform a left join to combine the datasets\nwb_democracy_data <- left_join(\n  wbdata_with_vdem_codes, \n  democracy_scores, \n  by = c(\"vdem_country_code\" = \"country_id\", \"year\" = \"year\")\n)\n\nglimpse(wb_democracy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 63\nColumns: 10\n$ country           <chr> \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"C…\n$ iso2c             <chr> \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\", \"CA\"…\n$ iso3c             <chr> \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CA…\n$ vdem_country_code <dbl> 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, …\n$ year              <dbl> 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012…\n$ NY.GDP.MKTP.CD    <dbl> 1.655685e+12, 1.743725e+12, 1.725329e+12, 1.649266e+…\n$ country_name      <chr> \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"Canada\", \"C…\n$ country_text_id   <chr> \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CAN\", \"CA…\n$ v2x_polyarchy     <dbl> 0.858, 0.863, 0.847, 0.847, 0.843, 0.816, 0.813, 0.8…\n$ v2xel_frefair     <dbl> 0.957, 0.950, 0.947, 0.947, 0.947, 0.898, 0.888, 0.8…\n```\n\n\n:::\n:::\n\nNotice here that while we had a common key for the country codes, the columns had different names. Therefore, we specified the `by` argument as a named vector, where we matched the `vdem_country_code` from the World Bank data to the `country_code` in the V-Dem data. Note that we also had to specify the year as a second key for the join. This is because both datasets have a `year` column that we want to match on as well.\n\n::: {.callout-warning icon=false}\n## Your Turn!!\n- Use the `WDI()` function to download a set of economic indicators for a country or set of countries.\n- Use the `countrycode` package to convert the country codes in your World Bank data to V-Dem codes.\n- Use the `fetchdem()` function to download V-Dem democracy scores for the same countries and years as your World Bank data.\n- Use `left_join()` to merge the two datasets based on the V-Dem country codes and year.\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}