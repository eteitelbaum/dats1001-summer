{
  "hash": "d2f95dd1d3e6d57dd2c6e9a7f9a194a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 1.4\"\nsubtitle: \"Intro to the Tidyverse\"\nformat: \n  html:\n    code-link: true\nhighlight-style: atom-one\nexecute: \n  echo: true\n  message: false\n  warning: false\n---\n\n::: {.callout-tip}\n## Prework\n- Make sure that the Tidyverse is installed. You can do this by running the `install.packages(\"tidyverse\")` command in the console if you have not done so already.\n- Familiarize yourself with the [Tidyverse](https://www.tidyverse.org/packages/) group of packages.\n- We will not be using all of these, but the first four (`ggplot2`, `dplyr`, `tidyr`, and `readr`) are essential for this course.\n- Create and save a QMD file for this module in your Module 1 project folder.\n:::\n\n## Overview\n\nData science involves a systematic workflow that takes us from raw data to meaningful insights. This journey typically includes data import, tidying, transformation, visualization, modeling, and communication of results. This is the workflow that we are going to be discussing for the rest of the course. \n\n![ ](images/ds-workflow.png)\n\nAt the heart of this workflow and modern data science in R lies the Tidyverse, an ecosystem of packages designed to work harmoniously together. The Tidyverse represents not just a collection of tools but also a philosophy about how data analysis should be approachedâ€”with consistency, clarity, and a focus on human readability. To get a better sense of what the it is all about, watch this video of Hadley Wickham, the creator of the Tidyverse, discussing the importance of code maintenance and the evolution of the Tidyverse.\n\n{{< video https://youtu.be/izFssYRsLZs?si=b6Oy4atpRrkfEKzB title='Hadley Wickham on Code Maintenance' >}}\n\nIn this module, you'll begin your journey with several core Tidyverse packages that form the foundation of data science work. While we will touch on most of the Tidyverse packages in this, course, there are four that are essential for our work:\n\n- `readr` streamlines the process of importing data into R\n- `dplyr` provides intuitive verbs for data manipulation and transformation\n- `ggplot2` enables creation of beautiful visualizations using the grammar of graphics\n- `tidyr` will be helpful when we want to reshape (pivot) our data \n\nToday, we are going to get a general sense of the Tidyverse. We will also talk about how to use the `readr` package to read data into R and a couple of ways to view the contents of the data frame. Then we will cover `ggplot2` in the next couple of modules and `dplyr` and `tidyr` will come into focus next week when we turn to data wrangling. \n\n## Working with Tidyverse Packages\n\nWhen using Tidyverse packages, you have a few options for how to load and access their functions.\n\nInitially, we'll load individual packages as needed. This approach helps you understand which functions come from which packages and allows you to be selective about which parts of the Tidyverse you're using.\n\nFor example, to load the ggplot2 package you would go:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\nAs you become more comfortable with the Tidyverse ecosystem, you might prefer to load all the core packages at once:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\nThis command loads all of the core Tidyverse packages, including `readr`, `ggplot2`, `dplyr`, `tidyr`, and others.\n\nSometimes you might see code where the author loads a package using its namespace by using the `::` operator, like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data, aes(x = variable1, y = variable2))\n```\n:::\n\nThis will not be as common a workflow for us, but it is helpful in context where you want to use a function from a package without loading the entire package. This can be helpful when putting code into production or writing packages because it helps to avoid conflicts between functions and minimize resources.\n\n## Reading Data into R\n\nThe first step in most data analysis projects is importing your data. The `readr` package makes this process straightforward and efficient, especially when working with CSV files, which are one of the most common data formats.\n\nLet's start by loading the readr package and importing a dataset about democracy measures around the world. Download this data set and move it in your project folder as `dem_summary.csv`: \n\n<a href=\"data/dem_summary.csv\" download>ðŸ“¥ Download CSV</a>\n\nA best practice is to save your data files in a subfolder within your project directory. Usually we would call that folder \"data\" and reference the file as `data/name_of_file.csv`. This keeps your workspace organized and makes it easier to find your data files later.\n\nNow try reading in the data and storing it in an object using the `read_csv()` function from the readr package like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n```\n:::\n\nWhen you run this code, readr will display a message showing how it interpreted each column (e.g., as character, numeric, etc.). This is helpful for quickly identifying if any columns were parsed incorrectly.\n\n::: {.callout-note}\nWe could also have used the base R read function `read.csv()` to read in the data, but `read_csv()` is generally faster and more efficient. It also has a number of advantages over the base R function. For example, it automatically handles column types, so you don't have to specify them manually. `read_csv()` also provides better handling of missing values and other common issues that can arise when importing data.\n:::\n\n## Viewing the Data\n\nOnce you've imported your data, it's important to take a look at it to ensure everything looks correct. One way to do this is to type `View()` in your console or (equivalently) click on the name of the object in your Environment tab to see the data in a spreadsheet:\n\n![](images/view_df.gif){fig-align=\"center\"}\n\nThis will open a new tab in RStudio with a spreadsheet-like view of your data frame. This is a great way to get a quick overview of your data.\n\nThe `glimpse()` function from the dplyr package is another great way to get an overview of your data frame. It provides a quick summary of the data, including the number of rows and columns, the names of the columns, and the data types of each column.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ndem_summary <- read_csv(\"data/dem_summary.csv\")\n\nglimpse(dem_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 5\n$ region    <chr> \"The West\", \"Latin America\", \"Eastern Europe\", \"Asia\", \"Afriâ€¦\n$ polyarchy <dbl> 0.8709230, 0.6371358, 0.5387451, 0.4076602, 0.3934166, 0.245â€¦\n$ gdp_pc    <dbl> 37.913054, 9.610284, 12.176554, 9.746391, 4.410484, 21.134319\n$ flfp      <dbl> 52.99082, 48.12645, 50.45894, 50.32171, 56.69530, 26.57872\n$ women_rep <dbl> 28.12921, 21.32548, 17.99728, 14.45225, 17.44296, 10.21568\n```\n\n\n:::\n:::\n\nThere are some other base R functions that can be useful for viewing data frames. You can use the `head()` function to view the first few rows of a data frame:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dem_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  region         polyarchy gdp_pc  flfp women_rep\n  <chr>              <dbl>  <dbl> <dbl>     <dbl>\n1 The West           0.871  37.9   53.0      28.1\n2 Latin America      0.637   9.61  48.1      21.3\n3 Eastern Europe     0.539  12.2   50.5      18.0\n4 Asia               0.408   9.75  50.3      14.5\n5 Africa             0.393   4.41  56.7      17.4\n6 Middle East        0.246  21.1   26.6      10.2\n```\n\n\n:::\n:::\n\nYou can also use the `tail()` function to view the last few rows of a data frame:\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(dem_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  region         polyarchy gdp_pc  flfp women_rep\n  <chr>              <dbl>  <dbl> <dbl>     <dbl>\n1 The West           0.871  37.9   53.0      28.1\n2 Latin America      0.637   9.61  48.1      21.3\n3 Eastern Europe     0.539  12.2   50.5      18.0\n4 Asia               0.408   9.75  50.3      14.5\n5 Africa             0.393   4.41  56.7      17.4\n6 Middle East        0.246  21.1   26.6      10.2\n```\n\n\n:::\n:::\n\nAnd the `summary()` function to get a summary of the data frame, including the minimum, maximum, mean, and median values for each column:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dem_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    region            polyarchy          gdp_pc            flfp      \n Length:6           Min.   :0.2459   Min.   : 4.410   Min.   :26.58  \n Class :character   1st Qu.:0.3970   1st Qu.: 9.644   1st Qu.:48.68  \n Mode  :character   Median :0.4732   Median :10.961   Median :50.39  \n                    Mean   :0.5156   Mean   :15.832   Mean   :47.53  \n                    3rd Qu.:0.6125   3rd Qu.:18.895   3rd Qu.:52.36  \n                    Max.   :0.8709   Max.   :37.913   Max.   :56.70  \n   women_rep    \n Min.   :10.22  \n 1st Qu.:15.20  \n Median :17.72  \n Mean   :18.26  \n 3rd Qu.:20.49  \n Max.   :28.13  \n```\n\n\n:::\n:::\n\n## Your Turn! \n\n- Make sure that you are able to do all of the above-mentioned steps in this lesson, e.g. download the [dem_summary.csv](data/dem_summary.csv) file, read it into R and store it in an object, view the data frame, use the `glimpse()` function to summarize it, and use the `head()`, `tail()`, and `summary()` functions.\n- Repeat the steps above using a different data frame. Download the [dem_women.csv](data/dem_women.csv) file and store it in an object called `dem_women` or some name that is reflective of its content.\n- In your Quarto document, below your code chunk, write a few short paragraphs describing the data frame. \n  - What are the data frame's dimensions (e.g. how many rows and columns does it have)? \n  - What are the names of the columns? What do they represent and what are the data types? \n  - What are the first few rows of the data frame? The last few rows?\n  - What do the rows represent? How are these data different from the the data in the `dem_summary` data frame? (Hint: there are more rows in this data frame.)\n  - Take one or two columns and describe the summary statistics. What do these summary statistics represent? (Hint: there is a temporal dimension to consider.)\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}