{
  "hash": "552f9d10177eb3677cbbd50e247e31b0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 2.2\"\nsubtitle: \"Transforming Data\"\nformat: \n  html:\n    code-link: true\nhighlight-style: atom-one\nexecute: \n  echo: true\n  message: false\n  warning: false\n---\n\n::: {.callout-tip}\n## Prework\n- Start a new QMD file for this module in your Module 2 project folder.\n- Install the `nycflights13` package: `install.packages(\"nycflights13\")`.\n- Familiarize yourself with the `dplyr` [package](https://dplyr.tidyverse.org/articles/dplyr.html).\n- Have a look at the `dplyr` [cheatsheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf).\n:::\n\n## Overview\n\nSometimes we want to do more than just explore a dataset in its raw form—we want to tailor it to answer specific questions. Whether we’re preparing data for a report, cleaning it for visualization, or building a model, it's often necessary to narrow down to the most relevant rows, select only the variables we care about, or generate new variables that express relationships or transformations more clearly. In this module, we’ll learn how to do just that using three foundational functions from the dplyr package: filter(), select(), and mutate().\n\n## Exploring the `nycflights13` Data\n\nLet's use the `flights` dataset from the `nycflights13` package to learn the grammar of data wrangling in R. This dataset contains detailed information on all flights departing from New York City airports in 2013. It includes a variety of variables, such as departure and arrival times, flight delays, air time, and more, making it an ideal dataset for practicing data wrangling techniques.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nflights |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n## Filtering Rows with `filter()`\n\nThe `filter()` function allows us to extract rows from a data frame that meet specific conditions. This is useful when we want to zoom in on a particular subset of the data. For example, we might be interested in analyzing only the flights that departed on a certain day, or perhaps only the flights from a specific carrier or airport.\n\nSuppose we want to examine only the flights that departed on January 1st. We can use:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(month == 1, day == 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\nFiltering is essential when we are interested in targeted analyses, like studying seasonal trends, isolating outliers, or preparing training and test sets for modeling.\n\n::: {.callout-important}\n## == vs =\nIn the above code chunk, we used `filter(month == 1, day == 1)` to filter for flights departing on January 1. The `==` operator is used for comparison, meaning \"equal to.\" This is different from the `=` operator, which is used for assignment in R. When filtering data, we always use `==` to specify conditions we want to match (not `=`).\n:::\n\nThe `filter()` function can handle multiple conditions using logical operators. Here we used `==` for \"equal to.\" But we could also use `!=` (not equal to), `<` (less than), `>` (greater than), `&` (and), and `|` (or). We can also combine operators to create more complex conditions. For example, if we wanted to filter for flights that occurred in the month of June or earlier, we could write `filter(month <= 6)`. Similarly, to find flights that were delayed by more than 30 minutes, we could use `filter(dep_delay > 30)`. Try experimenting with these operators in the `filter()` function in the code above to see how they affect the results.\n\n::: {.callout-warning icon=false}\n## Your Turn!! \n\n1. Use the `filter()` function to find all flights that departed from JFK airport.\n2. Filter the flights that arrived on or after June 1.\n3. Find flights that arrived before May 1 and were delayed by more than 60 minutes.\n4. Filter for flights that were operated by American Airlines (carrier code \"AA\") or Delta Airlines (carrier code \"DL\").\n:::\n\n## Selecting Columns with `select()`\n\nThe `select()` function is used to choose a subset of columns from a data frame. This is helpful when we are only interested in a few variables and want to avoid cluttering our analysis with unnecessary information.\n\nFor example, if we want to examine only the year, month, day, departure time, and flight number, we might write:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year, month, day, dep_time, arr_time, carrier, flight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n    year month   day dep_time arr_time carrier flight\n   <int> <int> <int>    <int>    <int> <chr>    <int>\n 1  2013     1     1      517      830 UA        1545\n 2  2013     1     1      533      850 UA        1714\n 3  2013     1     1      542      923 AA        1141\n 4  2013     1     1      544     1004 B6         725\n 5  2013     1     1      554      812 DL         461\n 6  2013     1     1      554      740 UA        1696\n 7  2013     1     1      555      913 B6         507\n 8  2013     1     1      557      709 EV        5708\n 9  2013     1     1      557      838 B6          79\n10  2013     1     1      558      753 AA         301\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\nWe can also rename variables while selecting them, which can be useful for clarity or consistency with other datasets:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(date = time_hour, airline = carrier, flight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n   date                airline flight\n   <dttm>              <chr>    <int>\n 1 2013-01-01 05:00:00 UA        1545\n 2 2013-01-01 05:00:00 UA        1714\n 3 2013-01-01 05:00:00 AA        1141\n 4 2013-01-01 05:00:00 B6         725\n 5 2013-01-01 06:00:00 DL         461\n 6 2013-01-01 05:00:00 UA        1696\n 7 2013-01-01 06:00:00 B6         507\n 8 2013-01-01 06:00:00 EV        5708\n 9 2013-01-01 06:00:00 B6          79\n10 2013-01-01 06:00:00 AA         301\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\nSelecting variables makes our workflow cleaner, especially when preparing data for visualization or modeling.\n\n::: {.callout-warning icon=false}\n## Your Turn!!\n\n1. Use the `select()` function to keep only the `year`, `month`, `day`, `dep_time`, and `arr_time` columns.\n2. Select the `flight`, `origin`, `dest`, and `air_time` columns and rename them to `flight_number`, `departure_airport`, `arrival_airport`, and `flight_duration`.\n:::\n\n## Creating New Variables with `mutate()`\n\nThe `mutate()` function allows us to add new columns to a data frame or transform existing ones. This is useful for deriving new insights from raw data. For example, we might want to calculate how much time was gained or lost during a flight:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(time_gain = arr_delay - dep_delay) |>\n  select(flight, dep_delay, arr_delay, time_gain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n   flight dep_delay arr_delay time_gain\n    <int>     <dbl>     <dbl>     <dbl>\n 1   1545         2        11         9\n 2   1714         4        20        16\n 3   1141         2        33        31\n 4    725        -1       -18       -17\n 5    461        -6       -25       -19\n 6   1696        -4        12        16\n 7    507        -5        19        24\n 8   5708        -3       -14       -11\n 9     79        -3        -8        -5\n10    301        -2         8        10\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\nThis calculation gives us a sense of whether flights tended to recover from delays during their journey. We can also use `mutate()` to convert units (e.g., minutes to hours), flag particular conditions, or apply mathematical transformations.\n\nWe can use many different arithmetic operations within `mutate()`, such as addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`) or exponentiation (`^` or `**`). For example, if we wanted to convert `air_time` from minutes to hours, we could write `mutate(air_time_hours = air_time / 60)`. Or, if we wanted to square the `arr_delay` variable, we could write `mutate(arr_delay_squared = arr_delay^2)` or `mutate(arr_delay_squared = arr_delay ** 2)`. We will use arithmetic operators in the context of mutate a lot in the course, so it’s worth practicing with different operations to see how they work.\n\n::: {.callout-warning icon=false}\n## Your Turn!!\n\n1. Use the `mutate()` function to create a new variable called `total_delay` that sums `dep_delay` and `arr_delay`.\n2. Create a new variable called `air_time_hours` that converts `air_time` from minutes to hours.\n3. Add a new variable called `flight_speed` that calculates the average speed of the flight in miles per hour, assuming the distance is given in miles and after converting air time into hours.\n:::\n\n## Combining `filter()`, `select()`, and `mutate()`\n\nThese three functions are most powerful when used together. A typical workflow might involve narrowing down the dataset to a subset of interest, selecting relevant variables, and then creating new variables to aid analysis.\n\nHere’s an example:\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(month == 6, day == 15) |>\n  select(flight, origin, dest, dep_delay, arr_delay) |>\n  mutate(total_delay = dep_delay + arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 801 × 6\n   flight origin dest  dep_delay arr_delay total_delay\n    <int> <chr>  <chr>     <dbl>     <dbl>       <dbl>\n 1   1431 EWR    CLT          -4       -22         -26\n 2    327 EWR    IAH           0        -3          -3\n 3    725 JFK    BQN          -4        34          30\n 4   1714 LGA    IAH          -3       -25         -28\n 5   1141 EWR    SFO          -2        -5          -7\n 6   5559 EWR    DTW          -9        -9         -18\n 7    635 LGA    ORD          -7       -23         -30\n 8    517 EWR    MCO          -6       -28         -34\n 9    731 LGA    DTW          -6       -16         -22\n10   1535 LGA    PHL          -6        -7         -13\n# ℹ 791 more rows\n```\n\n\n:::\n:::\n\nIn this example, we look at flights on June 15, keep only columns that describe the flight and its delays, and compute the total delay time. This kind of pipeline helps us build a tidy and interpretable dataset suited for visualization or statistical analysis.\n\n## Applying the Concepts to the V-Dem Dataset\n\nNow that we have a solid understanding of how to filter, select, and mutate data using dplyr, let's apply these concepts to a new dataset: the Varieties of Democracy (V-Dem) dataset. This dataset contains a wealth of information about democracy and governance across countries and over time.\n\nIn this video walkthrough, we’ll revisit the `filter()`, `select()`, and `mutate()` functions in the context of real-world political data. We'll explore how to narrow our focus to particular years or countries, select the most relevant indicators of democracy, and construct new variables that help make sense of complex governance metrics.\n\n{{< video https://www.youtube.com/watch?v=ScQD47eJeAE title='Transforming Data with dplyr Verbs' >}}\n\n::: {.callout-warning icon=false}\n## Your Turn!!\n\n1. Using the nycflights dataset, filter the flights for February only.\n2. Select `carrier`, `origin`, `dest`, and `air_time`.\n3. Create a new variable that converts `air_time` from minutes to hours.\n4. Explore other interesting combinations using `filter()`, `select()`, and `mutate()`.\n5. Go to kaggle.com and find a dataset that interests you. Use the `dplyr` functions to filter, select, and mutate the data. Optional: `glimpse()` your data and share a screenshot of your results in the discussion forum.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}