{
  "hash": "f1a3509470304123c731b2d21993b4cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 1.2\"\nsubtitle: \"Meet ouR Tech Stack\"\nformat: html\nexecute: \n  echo: true\n  message: false\n  warning: false\n---\n\n::: {.callout-tip}\n## Prework\n- Install R, R Studio and the Tidyverse collection of packages if you have not done so already (see [getting started](/modules/module-1.1.qmd))\n- Read this [markdown guide](https://www.markdownguide.org/getting-started/)\n:::\n\n## Overview\n\nIn this module, we'll build on your first experience with Quarto documents and go deeper into effective authoring and project organization. By the end, you should feel comfortable creating reproducible reports that include well-organized text, code, and outputs.\n\n## Why Project-Oriented Workflows Matter\n\nWhen you're just starting out, it's tempting to save your files wherever is convenient—maybe the Desktop, maybe the Downloads folder. But as your analysis grows more complex or involves collaborators, maintaining an organized file structure becomes essential. A good Quarto project keeps all your materials—data, scripts, and reports—in a consistent, portable format. This not only helps avoid broken file paths, but also supports reproducibility, sharing, and long-term clarity.\n\nA typical layout might include your main `.qmd` document, a `data/` folder for input files, a separate folder for images or plots, and a designated location for rendered outputs. Keeping everything bundled in a single project folder also makes it easier to track changes and collaborate via Git or GitHub.\n\n## YAML Front Matter Revisited\n\nYou’ve already encountered the YAML block at the top of a Quarto document. Now let’s take a closer look at what it does.\n\nThe YAML front matter sets key metadata and document options. For example:\n\n```yaml\ntitle: \"My Report\"\nauthor: \"Your Name\"\ndate: today\nformat: html\nexecute:\n  echo: false\n  message: false\n```\n\nHere, the `title`, `author`, and `date` fields define the document header. The `format` field tells Quarto what type of file to create—HTML in this case. The `execute` section controls global options for code chunks. In this example, code won’t be shown (`echo: false`) and messages will be suppressed (`message: false`). These defaults apply to all chunks in the document, though individual chunks can override them.\n\n## Authoring with Markdown\n\nQuarto documents are written in Markdown, a lightweight markup language designed for readability. You don’t need to remember complex formatting commands. To create section headings, you simply use hash signs—`#` for the main title, `##` for sections, and so on. Italics and bold are created with asterisks, like `*italic*` and `**bold**`.\n\n{{< video https://youtu.be/bTVIMt3XllM?si=krDEL4lvyT-T5DZc title='Markdown Crash Course' >}}\n\nYou can also create numbered or unnumbered lists by just typing them directly, and you can include links with `[text](https://quarto.org)` syntax. Images work the same way—just add an exclamation mark in front, like `![](images/myplot.png)`. The goal is to keep your writing clear and uncluttered while supporting rich formatting features.\n\n## Code Chunks in Depth\n\nOne of the key advantages of Quarto is the ability to weave together code and prose. You can insert a code chunk by typing three backticks and specifying the language, like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n\n\n:::\n:::\n\nYou can also control how chunks behave using chunk options. Quarto supports a special `#|` syntax that lets you configure each chunk individually. For instance, you can use `#| echo: ` to control whether the code is displayed along with the output, or `#| label: ` to add a label to a code chunk (labels can be useful if you want to identify where an error is coming from or to reuse code from a chunk).\n\n![](images/code-chunks.gif){fig-align=\"center\"}\n\nIn this example, we’ve given the chunk a label (`mtcars_plot`) and hidden the code from the final output using `echo: false`. Notice how in the rendered version the first chunk shows the code but the second and third do not. This is useful when you want to show the results—like a plot—without showing the code that generated it. You can also hide messages, warnings, and even outputs in a similar way. \n\n## Your Turn!\n\nLet’s put everything together in a small project. Start by creating a new folder and placing a new Quarto document inside it. Here is an illustration to remind you how to do that (for a fuller explanation, review the [Getting Started](getting-started.qmd) module).\n\n![](images/intro_quarto.gif){fig-align=\"center\"}\n\nWrite a few short paragraphs of narrative text and include a code chunk that generates a plot with `ggplot2`. If you have images or data files, place them in subfolders and link to them using relative paths.\n\nOnce you’ve written your report, render the document to HTML. Open the result in your browser and make sure everything displays correctly. Along the way, try adjusting chunk options to control what appears in the final output. If you run into rendering errors, use the error messages to debug step-by-step—this is a valuable part of learning.\n\n## Final Tips\n\nAs a rule of thumb, always use relative file paths inside your Quarto projects. This means referring to files based on their position in the folder structure, not their full computer location. It helps keep your project portable so that it runs smoothly on any machine, whether yours or a collaborator’s.\n\nWhen in doubt, label your chunks, write clearly, and remember that Quarto documents are meant to evolve. The more you write and render, the more confident you’ll become.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}